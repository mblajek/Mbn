{
    "php": [
        ["0", "0"],
        ["new Mbn(NAN)", "mbn.invalid_argument Niepoprawny argument NAN*"],
        ["new Mbn(INF)", "mbn.limit_exceeded Mbn error*"],
        ["array_values((new Mbn('42'))->split(5))", "8.40,8.40,8.40,8.40,8.40"],
        ["array_keys((new Mbn('42'))->split(5))", "0,1,2,3,4"],
        ["array_values((new Mbn('42'))->split(['a'=>2,0=>3,'c'=>5]))", "8.40,12.60,21.00"],
        ["array_keys((new Mbn('42'))->split(['a'=>2,0=>3,'c'=>5]))", "a,0,c"],
        ["array_values((new Mbn('42'))->split(['a'=>2,0=>-3,'c'=>5]))", "21.00,-31.50,52.50"],
        ["array_keys((new Mbn('42'))->split(['a'=>2,0=>-3,'c'=>5]))", "a,0,c"],
        ["Mbn::reduce('mul', ['a'=>2,0=>3,'c'=>5])", "30.00"],
        ["array_values(Mbn::reduce('invm', ['a'=>2,0=>3,'c'=>5]))", "0.50,0.33,0.20"],
        ["array_keys(Mbn::reduce('invm', ['a'=>2,0=>3,'c'=>5]))", "a,0,c"],
        ["array_values(Mbn::reduce('add', ['a'=>5, 0=>7, 'c'=>10], ['a'=>1.1, 0=>1.2, 'c'=>1.3]))", "6.10,8.20,11.30"],
        ["array_keys(Mbn::reduce('add', ['a'=>5, 0=>7, 'c'=>10], ['a'=>1.1, 0=>1.2, 'c'=>1.3]))", "a,0,c"],
        ["array_values(Mbn::reduce('add', ['a'=>5, 0=>7, 'c'=>10], ['a'=>1.1, 0=>1.2, 'x'=>1.3]))", "mbn.reduce.different_keys Mbn.reduce error*"],
        ["gettype((new Mbn(1.2))->toNumber())", "double"],
        ["gettype((new Mbn(1))->toNumber())", "double"],
        ["gettype((new Mbn0(1.2))->toNumber())", "integer"],
        ["MbnColon::prop()", "mbn.extend.invalid_separator Mbn.extend error*"],
        ["new Mbn(-9223372036854775807-1)", "-9223372036854775808.00", "int min"],
        ["new Mbn(9223372036854775807)", "9223372036854775807.00", "int max"],
        ["0", "0"]
    ],
    "js": [
        ["0", "0"],
        ["new Mbn(NaN)", "mbn.invalid_argument Niepoprawny argument NaN*"],
        ["new Mbn(Infinity)", "mbn.limit_exceeded Mbn error*"],
        ["typeof ((new Mbn(1))->toNumber())", "number"],
        ["typeof ((new Mbn0(1.2))->toNumber())", "number"],
        ["Mbn::reduce('pow', [2, 3], undefined)", "1.00,1.00"],
        ["new Mbn(wrapBigInt(4))", "4.00"],
        ["new Mbn(wrapBigInt(-4))", "-4.00"],
        ["(new Mbn(1234567.12))->format(undefined)", "1 234 567.12"],
        ["$m = new Mbn('4.32'); $m->sqrt(undefined); $m", "4.32"],
        ["Mbn::calc('sqrt(40!)')", "mbn.operations_limit Mbn error*"],
        ["Mbn::calc('1000^1000')", "mbn.limit_exceeded Mbn error*"],
        ["Mbn::calc('sqrt(38!)')", "22869687743093501007951.18"],
        ["Mbn::calc('zero(eps/2.01)')", "1.00"],
        ["Mbn::calc('zero(-eps)')", "0.00"],
        ["0", "0"]
    ],
    "both": [
        ["0", "0"],
        ["Mbn::def('V', 4)", "4.00"],
        ["Mbn0::def('V', 4)", "4"],
        ["new Mbn(null)", "0.00"],
        ["new Mbn(true)", "1.00"],
        ["new Mbn(false)", "0.00"],
        ["new Mbn0()", "0"],
        ["new Mbn0('1.4')", "1"],
        ["new Mbn0('1.5')", "2"],
        ["new Mbn0(1.6)", "2"],
        ["new Mbn0('-1.4')", "-1"],
        ["new Mbn0('-1.5')", "-2"],
        ["new Mbn0(-1.6)", "-2"],
        ["new Mbn0('-  1.6')", "-2"],
        ["new Mbn0(' - 1.6')", "-2"],
        ["new Mbn0('  -1.6')", "-2"],
        ["new Mbn0(' - 1.6 ')", "-2"],
        ["new Mbn0(' - 1. ')", "-1"],
        ["new Mbn0(' - .6 ')", "-1"],
        ["new Mbn0(' + .6 ')", "1"],
        ["new Mbn('')", "0.00"],
        ["new Mbn(' + ')", "0.00"],
        ["new Mbn(' a ')", "mbn.invalid_format Mbn error*"],
        ["new Mbn('.')", "mbn.invalid_format Mbn error*"],
        ["new Mbn()", "0.00"],
        ["new Mbn('1.234')", "1.23"],
        ["new Mbn('1.235')", "1.24"],
        ["new Mbn(1.236)", "1.24"],
        ["new Mbn('-1.234')", "-1.23"],
        ["new Mbn('-1.235')", "-1.24"],
        ["new Mbn(-1.236)", "-1.24"],
        ["new Mbn('- 1.6')", "-1.60"],
        ["new Mbn(' - 1.6')", "-1.60"],
        ["new Mbn(' -1.6')", "-1.60"],
        ["new Mbn(' - 1.6 ')", "-1.60"],
        ["new Mbn(' - 1. ')", "-1.00"],
        ["new Mbn(' - .6 ')", "-0.60"],
        ["new Mbn(' + .6 ')", "0.60"],
        ["new Mbn([5, 7])", "mbn.invalid_argument Niepoprawny argument [5,7] dla konstruktora [5,7]"],
        ["new Mbn(function(){})", "mbn.invalid_argument Niepoprawny*"],
        ["new Mbn([1,2,[3,4],5])", "mbn.invalid_argument Niepoprawny argument [1,2,[..],5]*"],
        ["new Mbn([1,2,[3,4],5,6,7,8,9])", "mbn.invalid_argument Niepoprawny argument [1,2,[..],5,6,7,8,9]*"],
        ["new Mbn([1,2,[3,4],5,6,7,8,9,0])", "mbn.invalid_argument Niepoprawny argument [1,2,[..],5,6,7,8,..*"],
        ["new Mbn20u()", "0"],
        ["new Mbn20u('0,000000000000000000005')", "0,00000000000000000001"],
        ["new Mbn20u('-0,000000000000000000005')", "-0,00000000000000000001"],
        ["new Mbn0(new Mbn(1.495))", "2"],
        ["new Mbn0(new Mbn(-1.495))", "-2"],
        ["new Mbn3c(new Mbn20u('0,999499999999999999994'))", "0,999"],
        ["new Mbn3c(new Mbn20u('0,999499999999999999995'))", "1,000"],
        ["new Mbn3c(new Mbn20u('-0,999499999999999999994'))", "-0,999"],
        ["new Mbn3c(new Mbn20u('-0,999499999999999999995'))", "-1,000"],
        ["new Mbn(new Mbn3c('-1.123'))", "-1.12"],
        ["(new Mbn(-10))->max(new Mbn3c('-1.123'))", "-1.12"],
        ["new Mbn20u(new Mbn20u('4,5'))", "4,5"],
        ["new Mbn0(new Mbn20u('4,5'))", "5"],
        ["(new Mbn0(-1))->cmp(1)", "-1"],
        ["(new Mbn0(-1))->cmp(0)", "-1"],
        ["(new Mbn0(0))->cmp(1)", "-1"],
        ["(new Mbn0(-1))->cmp(-1)", "0"],
        ["(new Mbn0(0))->cmp(0)", "0"],
        ["(new Mbn0(1))->cmp(1)", "0"],
        ["(new Mbn0(1))->cmp(-1)", "1"],
        ["(new Mbn0(1))->cmp(0)", "1"],
        ["(new Mbn0(0))->cmp(-1)", "1"],
        ["(new Mbn0(0))->cmp(0, -1)", "mbn.cmp.negative_diff Mbn.cmp error*"],
        ["(new Mbn0(-1))->eq(1)", "false"],
        ["(new Mbn0(1))->eq(1)", "true"],
        ["(new Mbn0(1))->eq(-1)", "false"],
        ["(new Mbn0(4))->add(3)", "7"],
        ["(new Mbn0(4))->add(-3)", "1"],
        ["(new Mbn0(-4))->add(3)", "-1"],
        ["(new Mbn0(-4))->add(-3)", "-7"],
        ["(new Mbn0(3))->add(4)", "7"],
        ["(new Mbn0(3))->add(-4)", "-1"],
        ["(new Mbn0(-3))->add(4)", "1"],
        ["(new Mbn0(-3))->add(-4)", "-7"],
        ["(new Mbn0(3))->add(-3)", "0"],
        ["(new Mbn0(-3))->add(3)", "0"],
        ["(new Mbn0(4))->sub(3)", "1"],
        ["(new Mbn0(4))->sub(-3)", "7"],
        ["(new Mbn0(-4))->sub(3)", "-7"],
        ["(new Mbn0(-4))->sub(-3)", "-1"],
        ["(new Mbn0(3))->sub(4)", "-1"],
        ["(new Mbn0(3))->sub(-4)", "7"],
        ["(new Mbn0(-3))->sub(4)", "-7"],
        ["(new Mbn0(-3))->sub(-4)", "1"],
        ["(new Mbn0(3))->sub(3)", "0"],
        ["(new Mbn0(-3))->sub(-3)", "0"],
        ["(new Mbn0(3))->add(0)", "3"],
        ["(new Mbn0(-3))->add(0)", "-3"],
        ["(new Mbn0(0))->add(3)", "3"],
        ["(new Mbn0(0))->add(-3)", "-3"],
        ["(new Mbn0(3))->sub(0)", "3"],
        ["(new Mbn0(-3))->sub(0)", "-3"],
        ["(new Mbn0(0))->sub(3)", "-3"],
        ["(new Mbn0(0))->sub(-3)", "3"],
        ["(new Mbn0(4))->mul(3)", "12"],
        ["(new Mbn0(4))->mul(-3)", "-12"],
        ["(new Mbn0(-4))->mul(3)", "-12"],
        ["(new Mbn0(-4))->mul(-3)", "12"],
        ["(new Mbn0(3))->mul(4)", "12"],
        ["(new Mbn0(3))->mul(-4)", "-12"],
        ["(new Mbn0(-3))->mul(4)", "-12"],
        ["(new Mbn0(-3))->mul(-4)", "12"],
        ["(new Mbn0(4))->div(3)", "1"],
        ["(new Mbn0(4))->div(-3)", "-1"],
        ["(new Mbn0(-4))->div(3)", "-1"],
        ["(new Mbn0(-4))->div(-3)", "1"],
        ["(new Mbn0(3))->div(4)", "1"],
        ["(new Mbn0(3))->div(-4)", "-1"],
        ["(new Mbn0(-3))->div(4)", "-1"],
        ["(new Mbn0(-3))->div(-4)", "1"],
        ["(new Mbn0(5))->div(3)", "2"],
        ["(new Mbn0(5))->div(-3)", "-2"],
        ["(new Mbn0(-5))->div(3)", "-2"],
        ["(new Mbn0(-5))->div(-3)", "2"],
        ["(new Mbn0(2))->div(5)", "0"],
        ["(new Mbn0(2))->div(-5)", "0"],
        ["(new Mbn0(-2))->div(5)", "0"],
        ["(new Mbn0(-2))->div(-5)", "0"],
        ["(new Mbn0(3))->mul(0)", "0"],
        ["(new Mbn0(-3))->mul(0)", "0"],
        ["(new Mbn0(0))->mul(3)", "0"],
        ["(new Mbn0(0))->mul(-3)", "0"],
        ["(new Mbn0(3))->div(0)", "mbn.div.zero_divisor Mbn.div error*"],
        ["(new Mbn0(-3))->div(0)", "mbn.div.zero_divisor Mbn.div error*"],
        ["(new Mbn0(0))->div(3)", "0"],
        ["(new Mbn0(0))->div(-3)", "0"],
        ["(new Mbn0(1))->isInt()", "true"],
        ["(new Mbn0(1))->round()", "1"],
        ["(new Mbn0(1))->floor()", "1"],
        ["(new Mbn0(1))->ceil()", "1"],
        ["(new Mbn('0.22'))->add('0.33')", "0.55"],
        ["(new Mbn('0.22'))->sub('0.33')", "-0.11"],
        ["(new Mbn('0.22'))->mul('0.33')", "0.07"],
        ["(new Mbn('0.22'))->div('0.33')", "0.67"],
        ["(new Mbn('0.22'))->add('-0.22')", "0.00"],
        ["(new Mbn('0.28'))->sub('0.28')", "0.00"],
        ["(new Mbn('0.08'))->mul('0.09')", "0.01"],
        ["(new Mbn('-0.02'))->mul('0.03')", "0.00"],
        ["(new Mbn('0.05'))->div('10')", "0.01"],
        ["(new Mbn('0.06'))->div('-20')", "0.00"],
        ["(new Mbn3c('1.1'))->inva()", "-1,100"],
        ["(new Mbn3c('0'))->inva()", "0,000"],
        ["(new Mbn3c('-1.1'))->inva()", "1,100"],
        ["(new Mbn3c('1.1'))->invm()", "0,909"],
        ["(new Mbn3c('0'))->invm()", "mbn.div.zero_divisor Mbn.div error*"],
        ["(new Mbn3c('-1.1'))->invm()", "-0,909"],
        ["(new Mbn3c('1.1'))->abs()", "1,100"],
        ["(new Mbn3c('0'))->abs()", "0,000"],
        ["(new Mbn3c('-1.1'))->abs()", "1,100"],
        ["(new Mbn('0.4'))->floor()", "0.00"],
        ["(new Mbn('0.5'))->floor()", "0.00"],
        ["(new Mbn('0.4'))->ceil()", "1.00"],
        ["(new Mbn('0.5'))->ceil()", "1.00"],
        ["(new Mbn('0.4'))->round()", "0.00"],
        ["(new Mbn('0.49'))->round()", "0.00"],
        ["(new Mbn('0.5'))->round()", "1.00"],
        ["(new Mbn('-0.4'))->floor()", "-1.00"],
        ["(new Mbn('-0.5'))->floor()", "-1.00"],
        ["(new Mbn('-0.4'))->ceil()", "0.00"],
        ["(new Mbn('-0.5'))->ceil()", "0.00"],
        ["(new Mbn('-0.4'))->round()", "0.00"],
        ["(new Mbn('-0.5'))->round()", "-1.00"],
        ["(new Mbn('1'))->isInt()", "true"],
        ["(new Mbn('1'))->isInt()", "true"],
        ["(new Mbn('0.005'))->isInt()", "false"],
        ["(new Mbn('-0.005'))->isInt()", "false"],
        ["(new Mbn('0'))->isInt()", "true"],
        ["(new Mbn20u('21,25'))->toNumber()", "21.25"],
        ["(new Mbn20u('-21,5'))->toNumber()", "-21.5"],
        ["(new Mbn3c('21.3'))->eq('21.3')", "true"],
        ["(new Mbn3c('-21.3'))->eq('21.3')", "false"],
        ["(new Mbn3c('21.3'))->eq('21.4')", "false"],
        ["(new Mbn3c('21.4'))->eq('21.2')", "false"],
        ["(new Mbn3c('21.3'))->eq('21.4', '0.1')", "true"],
        ["(new Mbn3c('21.3'))->eq('21.2', '0.1')", "true"],
        ["(new Mbn3c('21.3'))->eq('21.1', '0.1')", "false"],
        ["(new Mbn3c('21.3'))->eq('21.5', '0.1')", "false"],
        ["(new Mbn3c('21.3'))->cmp('21.3')", "0"],
        ["(new Mbn3c('-21.3'))->cmp('21.3')", "-1"],
        ["(new Mbn3c('21.3'))->cmp('21.4')", "-1"],
        ["(new Mbn3c('21.4'))->cmp('21.2')", "1"],
        ["(new Mbn3c('21.3'))->cmp('21.4', '0.1')", "0"],
        ["(new Mbn3c('21.3'))->cmp('21.2', '0.1')", "0"],
        ["(new Mbn3c('21.3'))->cmp('21.1', '0.1')", "1"],
        ["(new Mbn3c('21.3'))->cmp('21.5', '0.1')", "-1"],
        ["(new Mbn3c('0.1'))->eq('0.3', '0.2')", "true"],
        ["(new Mbn3c('0.1'))->eq('-0.1', '0.2')", "true"],
        ["(new Mbn3c('0.1'))->eq('0', '0.2')", "true"],
        ["(new Mbn3c('0.1'))->eq('0.4', '0.2')", "false"],
        ["(new Mbn3c('0.1'))->eq('-0.2', '0.2')", "false"],
        ["(new Mbn0('2'))->pow('5')", "32"],
        ["(new Mbn0('2'))->pow('-5')", "0"],
        ["(new Mbn0('3'))->pow('3')", "27"],
        ["(new Mbn0('3'))->pow('-3')", "0"],
        ["(new Mbn('3'))->pow('0.5')", "mbn.pow.unsupported_exponent Mbn.pow error*"],
        ["(new Mbn(.5))->pow(7)", "0.01"],
        ["(new Mbn3c('2'))->pow('5')", "32,000"],
        ["(new Mbn3c('2'))->pow('-5')", "0,031"],
        ["(new Mbn3c('1.1'))->pow('4')", "1,464"],
        ["(new Mbn3c('1.1'))->pow('-4')", "0,683"],
        ["(new Mbn('2'))->sqrt()", "1.41"],
        ["(new Mbn3c('2'))->sqrt()", "1,414"],
        ["(new Mbn20u('2'))->sqrt()", "1,4142135623730950488"],
        ["(new Mbn20u('3'))->sqrt()", "1,73205080756887729353"],
        ["(new Mbn20u('4'))->sqrt()", "2"],
        ["(new Mbn('-4'))->sqrt()", "mbn.sqrt.negative_value Mbn.sqrt error*"],
        ["$m = new Mbn('4.32'); $m->add(1.23); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->add(1.23, true); $m", "5.55"],
        ["$m = new Mbn('4.32'); $m->sub(1.23); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->sub(1.23, true); $m", "3.09"],
        ["$m = new Mbn('4.32'); $m->mul(1.23); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->mul(1.23, true); $m", "5.31"],
        ["$m = new Mbn('4.32'); $m->div(1.23); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->div(1.23, true); $m", "3.51"],
        ["$m = new Mbn('4.32'); $m->mod(1.23); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->mod(1.23, true); $m", "0.63"],
        ["$m = new Mbn('4.32'); $m->pow(2); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->pow(2, true); $m", "18.66"],
        ["$m = new Mbn('4.32'); $m->sqrt(); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->sqrt(true); $m", "2.08"],
        ["$m = new Mbn('4.32'); $m->cmp('3'); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->cmp('3', '2'); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->eq('3'); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->eq('3', '2'); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->isInt(); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->inva(); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->inva(true); $m", "-4.32"],
        ["$m = new Mbn('4.32'); $m->invm(); $m", "4.32"],
        ["$m = new Mbn('4.32'); $m->invm(true); $m", "0.23"],
        ["$m = new Mbn('-4.32'); $m->abs(); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->abs(true); $m", "4.32"],
        ["$m = new Mbn('-4.32'); $m->intp(); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->intp(true); $m", "-4.00"],
        ["$m = new Mbn('-4.32'); $m->floor(); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->floor(true); $m", "-5.00"],
        ["$m = new Mbn('-4.32'); $m->ceil(); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->ceil(true); $m", "-4.00"],
        ["$m = new Mbn('-4.32'); $m->round(); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->round(true); $m", "-4.00"],
        ["$m = new Mbn('-4.32'); $m->mod(3); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->mod(3, true); $m", "-1.32"],
        ["$m = new Mbn('-4.32'); $m->set(3); $m", "3.00"],
        ["$m = new Mbn('-4.32'); $m->sgn(); $m", "-4.32"],
        ["$m = new Mbn('-4.32'); $m->sgn(true); $m", "-1.00"],
        ["$m = new Mbn('-0.52'); $m->pow(-2); $m", "-0.52"],
        ["$m = new Mbn('-0.52'); $m->pow(-2, true); $m", "3.69"],
        ["$m = new Mbn('-0.52'); $m->fact(); $m", "mbn.fact.invalid_value Mbn.fact error*"],
        ["$m = new Mbn('0'); $m->fact(); $m", "0.00"],
        ["$m = new Mbn('1'); $m->fact(true); $m", "1.00"],
        ["$m = new Mbn('6'); $m->fact(true); $m", "720.00"],
        ["(new Mbn('3'))->split([1,3])", "0.75,2.25"],
        ["(new Mbn('3'))->split([2,3])", "1.20,1.80"],
        ["(new Mbn('3'))->split([3,3])", "1.50,1.50"],
        ["(new Mbn('3'))->split([1,2,3])", "0.50,1.00,1.50"],
        ["(new Mbn('2'))->split([1,1,1])", "0.67,0.67,0.66"],
        ["(new Mbn('1'))->split([0,1,1])", "0.00,0.50,0.50"],
        ["(new Mbn('1'))->split([1,1,0])", "0.50,0.50,0.00"],
        ["(new Mbn('100'))->split([99.99,0.01])", "99.99,0.01"],
        ["(new Mbn('100'))->split([0.01,99.99])", "0.01,99.99"],
        ["(new Mbn('100'))->split([100,23])", "81.30,18.70"],
        ["(new Mbn('42'))->split()", "21.00,21.00"],
        ["(new Mbn('42'))->split(5)", "8.40,8.40,8.40,8.40,8.40"],
        ["(new Mbn('100'))->split([100,-23])", "129.87,-29.87"],
        ["(new Mbn('100'))->split([70,50,-50])", "100.00,71.43,-71.43"],
        ["(new Mbn('100'))->split([-50,50,70])", "-71.43,71.43,100.00"],
        ["(new Mbn('100'))->split([1,2,3,-5])", "100.00,200.00,300.00,-500.00"],
        ["(new Mbn('100'))->split([-5,3,2,1])", "-500.00,300.00,200.00,100.00"],
        ["(new Mbn('100'))->split([-5,3,2])", "mbn.split.zero_part_sum Mbn.split error*"],
        ["(new Mbn3c('1.234'))->mod('0.401')", "0,031"],
        ["(new Mbn3c('3.234'))->mod('1')", "0,234"],
        ["(new Mbn3c('1.234'))->mod('-0.401')", "0,031"],
        ["(new Mbn3c('3.234'))->mod('-1')", "0,234"],
        ["(new Mbn3c('-1.234'))->mod('0.401')", "-0,031"],
        ["(new Mbn3c('-3.234'))->mod('1')", "-0,234"],
        ["(new Mbn3c('2.234'))->mod('4')", "2,234"],
        ["(new Mbn3c('2.123'))->intp()", "2,000"],
        ["(new Mbn3c('3.987'))->intp()", "3,000"],
        ["(new Mbn3c('-4.123'))->intp()", "-4,000"],
        ["(new Mbn3c('-5.987'))->intp()", "-5,000"],
        ["(new Mbn3c('0'))->intp()", "0,000"],
        ["(new Mbn('-99.5'))->mod(100)", "-99.50"],
        ["(new Mbn('99.5'))->mod(100)", "99.50"],
        ["(new Mbn0('55'))->mod(10)", "5"],
        ["(new Mbn0('-55'))->mod(10)", "-5"],
        ["(new Mbn0('54'))->mod(10)", "4"],
        ["(new Mbn0('-54'))->mod(10)", "-4"],
        ["(new Mbn('-2'))->max(-3)", "-2.00"],
        ["(new Mbn('-3'))->max(-2)", "-2.00"],
        ["(new Mbn('-2'))->max(3)", "3.00"],
        ["(new Mbn('3'))->max(-2)", "3.00"],
        ["(new Mbn('2'))->max(4)", "4.00"],
        ["(new Mbn('4'))->max(2)", "4.00"],
        ["(new Mbn('0'))->max(2)", "2.00"],
        ["(new Mbn('0'))->max(-2)", "0.00"],
        ["(new Mbn('-2'))->min(-3)", "-3.00"],
        ["(new Mbn('-3'))->min(-2)", "-3.00"],
        ["(new Mbn('-2'))->min(3)", "-2.00"],
        ["(new Mbn('3'))->min(-2)", "-2.00"],
        ["(new Mbn('2'))->min(4)", "2.00"],
        ["(new Mbn('4'))->min(2)", "2.00"],
        ["(new Mbn('0'))->min(2)", "0.00"],
        ["(new Mbn('0'))->min(-2)", "-2.00"],
        ["(new Mbn('0'))->set(-2)", "-2.00"],
        ["(new Mbn('0'))->sgn()", "0.00"],
        ["(new Mbn('-0.01'))->sgn()", "-1.00"],
        ["(new Mbn('0.03'))->sgn()", "1.00"],
        ["Mbn::def('hasOwnProperty')", "mbn.def.undefined Mbn.def error*"],
        ["Mbn::def('hasOwnProperty', 5)", "5.00"],
        ["Mbn::def('hasOwnProperty')", "5.00"],
        ["Mbn::def('E')", "2.72"],
        ["Mbn0::def('E')", "3"],
        ["Mbn0::def('2', 3)", "mbn.def.invalid_name Mbn.def error*"],
        ["Mbn0::def('2')", "mbn.def.invalid_name Mbn.def error*"],
        ["Mbn0::def(null, '2')", "mbn.def.invalid_name Mbn.def error*"],
        ["Mbn3c::def('E')", "2,718"],
        ["Mbn20u::def('E')", "2,71828182845904523536"],
        ["Mbn::def(null, 'PI')", "true"],
        ["Mbn::def('PI')", "3.14"],
        ["Mbn0::def('PI')", "3"],
        ["Mbn3c::def('PI')", "3,142"],
        ["Mbn20u::def('PI')", "3,14159265358979323846"],
        ["Mbn3c::def('PI', 2)", "mbn.def.already_set Mbn.def error: constant already set: \"PI\" = 3,142"],
        ["Mbn::def('MbnP')", "mbn.def.undefined Mbn.def error*"],
        ["Mbn4yec::def('eps', 5)", "mbn.def.already_set Mbn.def error: constant already set: \"eps\" = 0,0001"],
        ["Mbn::def('MbnP', 4.2)", "4.20"],
        ["Mbn3c::def('MbnP')", "mbn.def.undefined Mbn.def error*"],
        ["Mbn::def('X')", "mbn.def.undefined Mbn.def error*"],
        ["Mbn::def(null, 'X')", "false"],
        ["Mbn::def('X', 4.2)", "4.20"],
        ["Mbn::def(null, 'X')", "true"],
        ["Mbn::def('X')", "4.20"],
        ["Mbn::reduce('add', [])", "0.00"],
        ["Mbn::reduce('add', 1, 2)", "mbn.reduce.no_array Mbn.reduce*"],
        ["Mbn::reduce('add', [1,6,-2])", "5.00"],
        ["Mbn::reduce('mul', [1,6,-2])", "-12.00"],
        ["Mbn::reduce('inva', [1,6,-2])", "-1.00,-6.00,2.00"],
        ["Mbn::reduce('sgn', [1,6,-2])", "1.00,1.00,-1.00"],
        ["Mbn::reduce('sgn', [])", ""],
        ["Mbn::reduce('sgn', [1], 1)", "mbn.reduce.invalid_argument_count Mbn.reduce error*"],
        ["Mbn::reduce('set', [1,6,-2])", "1.00,6.00,-2.00"],
        ["Mbn::reduce('fact', [4,5])", "24.00,120.00"],
        ["Mbn::calc('2+2*2')", "6.00"],
        ["new Mbn('=2+2*2')", "6.00"],
        ["new Mbn('=2')", "2.00"],
        ["new Mbn('=2+3')", "5.00"],
        ["new Mbn('=2-3')", "-1.00"],
        ["new Mbn('=2/3')", "0.67"],
        ["new Mbn('=2^3')", "8.00"],
        ["new Mbn('=(1+2)(2+3)')", "15.00"],
        ["new Mbn('=-2')", "-2.00"],
        ["new Mbn('=(-2+1)')", "-1.00"],
        ["new Mbn('=(-2+-1)')", "-3.00"],
        ["new Mbn('=2^3^2')", "512.00"],
        ["new Mbn('=(2^3)^2')", "64.00"],
        ["new Mbn('=12/3/2')", "2.00"],
        ["new Mbn('=12/(3/2)')", "8.00"],
        ["new Mbn('=12*3/2')", "18.00"],
        ["new Mbn('=12/3*2')", "8.00"],
        ["new Mbn('=12/(3*2)')", "2.00"],
        ["new Mbn('=-7(-sqrt(4))')", "14.00"],
        ["new Mbn('=sqrt(2)')", "1.41"],
        ["new Mbn20u('=sqrt(0.00000002)')", "0,00014142135623730951"],
        ["new Mbn20u('=sqrt(0)')", "0"],
        ["new Mbn('=abs(-2-3)')", "5.00"],
        ["new Mbn('=-abs(-2-3)')", "-5.00"],
        ["new Mbn('=floor(3/2)')", "1.00"],
        ["new Mbn('=floor(3/-2)')", "-2.00"],
        ["new Mbn('=floor(-3/-2)')", "1.00"],
        ["new Mbn('=ceil(3/2)')", "2.00"],
        ["new Mbn('=ceil(-3/2)')", "-1.00"],
        ["new Mbn('=ceil(PI)')", "4.00"],
        ["new Mbn('=floor(PI)')", "3.00"],
        ["new Mbn('=ceil(-PI)')", "-3.00"],
        ["new Mbn('=floor(-PI)')", "-4.00"],
        ["new Mbn('=round(PI)')", "3.00"],
        ["new Mbn('=round(-PI)')", "-3.00"],
        ["new Mbn('=int(PI)')", "3.00"],
        ["new Mbn('=int(-PI)')", "-3.00"],
        ["new Mbn('=ceil(E)')", "3.00"],
        ["new Mbn('=floor(E)')", "2.00"],
        ["new Mbn('=ceil(-E)')", "-2.00"],
        ["new Mbn('=floor(-E)')", "-3.00"],
        ["new Mbn('=round(E)')", "3.00"],
        ["new Mbn('=round(-E)')", "-3.00"],
        ["new Mbn('=int(E)')", "2.00"],
        ["new Mbn('=int(-E)')", "-2.00"],
        ["new Mbn('=round(E)&E')", "2.72"],
        ["new Mbn('=round(PI)&PI')", "3.00"],
        ["new Mbn('=round(E)|E')", "3.00"],
        ["new Mbn('=round(PI)|PI')", "3.14"],
        ["new Mbn('=0&1|1')", "1.00"],
        ["new Mbn('=1|1&0')", "1.00"],
        ["new Mbn('=0&(1|1)')", "0.00"],
        ["new Mbn('=(1|1)&0')", "0.00"],
        ["Mbn::calc('0&1|1')", "1.00"],
        ["Mbn::calc('0&(1|1)')", "0.00"],
        ["new Mbn('=1',{a:0.5})", "1.00"],
        ["new Mbn('=.3a',{a:0.6})", "0.18"],
        ["new Mbn('=2 a a',{a:0.6})", "0.72"],
        ["new Mbn('=2a',{a:0.1})", "0.20"],
        ["new Mbn('=a(a+1)',{a:0.5})", "0.75"],
        ["new Mbn('=a(-a+1)',{a:0.6})", "0.24"],
        ["Mbn::calc('dsfsda(558)')", "mbn.calc.undefined Mbn.calc error*"],
        ["(new Mbn(123.12))->format()", "123.12"],
        ["(new Mbn(1234))->format()", "1 234.00"],
        ["(new Mbn(-1234))->format()", "-1 234.00"],
        ["(new Mbn(1234567.12))->format(false)", "1234567.12"],
        ["(new Mbn(1234567.12))->format(5)", "mbn.format.invalid_formatting Mbn.format error*"],
        ["(new Mbn(1234567.12))->format()", "1 234 567.12"],
        ["(new Mbn(1234567.12))->format({MbnF:2})", "mbn.format.invalid_formatting Mbn.format error*"],
        ["(new Mbn('-12 345.13'))", "-12345.13"],
        ["(new Mbn('-12 345.1 3'))", "mbn.invalid_format Mbn error*"],
        ["(new Mbn('=1 1.11 * 11.11'))", "123.43"],
        ["(new Mbn('=1 1.1 1 * 11.11'))", "mbn.invalid_format Mbn error*"],
        ["(new Mbn2nef('=10'))", "10.00"],
        ["(new Mbn2nef('=10*10'))", "mbn.invalid_format Mbn error*"],
        ["Mbn2nef::calc('10*10')", "100.00"],
        ["Mbn2nef::calc('123*456')", "56 088.00"],
        ["$a = Mbn2nef::calc('123*456'); $a->format(false)", "56088.00"],
        ["$a = Mbn2nef::calc('123*456'); $a->toNumber()", "56088"],
        ["(new Mbn(0))->mod(10)", "0.00"],
        ["Mbn::calc('(p-p#10^4)/10^4#10',{p:1230456789})", "5.00"],
        ["(new Mbn(2))->split(0)", "mbn.split.invalid_part_count Mbn.split error*"],
        ["(new Mbn(2))->split([])", "mbn.split.invalid_part_count Mbn.split error*"],
        ["Mbn::calc('a+b',{a:1, b:null})", "1.00"],
        ["(new Mbn(2))->split([1, null])", "2.00,0.00"],
        ["Mbn::reduce('add', [5, 7, 10])", "22.00"],
        ["Mbn::reduce('add', [5, 7, 10], 1.3)", "6.30,8.30,11.30"],
        ["Mbn::reduce('pow', [5, 2, 3], 3)", "125.00,8.00,27.00"],
        ["Mbn::reduce('add', [5, 7, 10], [1.1, 1.2, 1.3])", "6.10,8.20,11.30"],
        ["Mbn::reduce('add', [5, 7, 10], [1.1, 1.2])", "mbn.reduce.different_lengths Mbn.reduce error*"],
        ["Mbn::reduce('add', [1.1, 1.2], [5, 7, 10])", "mbn.reduce.different_lengths Mbn.reduce error*"],
        ["(new Mbn('55.555x'))", "mbn.invalid_format Mbn error*"],
        ["new Mbn('=50+10%')", "50.10"],
        ["Mbn::reduce('pow', [5, 7, 10], 2)", "25.00,49.00,100.00"],
        ["Mbn::reduce('pow', 2, [5, 7, 10])", "32.00,128.00,1024.00"],
        ["Mbn::reduce('mod', [5, 7.12, 10], [2, 3, 4])", "1.00,1.12,2.00"],
        ["Mbn::reduce('sub', [5, 7.12, 10], [2, 3, 4])", "3.00,4.12,6.00"],
        ["new Mbn0('=190%')", "2"],
        ["new Mbn('=a * b', {a:0.1})", "mbn.calc.undefined Mbn.calc error*"],
        ["Mbn0::def(null, 'MbnP')", "false"],
        ["Mbn0::def(null, 'eps')", "true"],
        ["Mbn::def('eps')", "0.01"],
        ["Mbn3c::def('eps')", "0,001"],
        ["Mbn0::def('eps')", "1"],
        ["Mbn2nef::def('eps')", "0.01"],
        ["new Mbn2nef('=15')", "15.00"],
        ["new Mbn2nef('=+15')", "15.00"],
        ["new Mbn2nef('=-15')", "-15.00"],
        ["new Mbn2nef('==15')", "15.00"],
        ["new Mbn('==15')", "15.00"],
        ["new Mbn('=1', false)", "1.00"],
        ["new Mbn('1/2', {})", "0.50"],
        ["new Mbn('1/3', true)", "0.33"],
        ["new Mbn('=1/4', false)", "mbn.invalid_format Mbn error*"],
        ["new Mbn('==1', true)", "1.00"],
        ["new Mbn('==1', false)", "1.00"],
        ["new Mbn('==1+1/5', true)", "1.20"],
        ["new Mbn('==1+1/6', false)", "mbn.invalid_format Mbn error*"],
        ["Mbn2nef::calc('==1+1/6', false)", "1.17"],
        ["Mbn::prop()['MbnE']", "null"],
        ["new Mbn4yec('7/3', false)", "mbn.invalid_format Mbn error:*"],
        ["new Mbn4yec('=7/4', false)", "mbn.invalid_format Mbn error*"],
        ["new Mbn4yec('==7/5', false)", "mbn.invalid_format Mbn error*"],
        ["new Mbn4yec('==7..5', true)", "mbn.invalid_format Mbn error*"],
        ["new Mbn('==7..5', true)", "mbn.invalid_format Mbn error*"],
        ["Mbn::reduce([1, 2], [3, 4])", "mbn.reduce.invalid_function Mbn.reduce error: invalid function name: [1,2]"],
        ["(new Mbn(4))->toString()", "4.00"],
        ["$a = {a:0.1, b:2}; new Mbn('=a * b', $a); $a['b']", "2"],
        ["$a = {a:0.1, b:2}; Mbn::calc('=a * b', $a); $a['b']", "2"],
        ["(new Mbn('42'))->split(-5)", "mbn.split.invalid_part_count Mbn.split error*"],
        ["Mbn::reduce('pow', [2, 3], null)", "1.00,1.00"],
        ["Mbn::reduce('pow', [2, 3])", "8.00"],
        ["Mbn::def('_q', 2)", "2.00"],
        ["Mbn::calc('n!/(k!*(n-k)!)', {n:7, k:3})", "35.00"],
        ["Mbn::calc('700*n%', {n:7})", "49.00"],
        ["Mbn::calc('sqrt(9)!')", "6.00"],
        ["Mbn::calc('sqrt(9!)')", "602.40"],
        ["Mbn::calc('sqrt(9))')", "mbn.calc.unexpected Mbn.calc error*"],
        ["Mbn::calc('500%!')", "120.00"],
        ["Mbn::calc('-500%!')", "-120.00"],
        ["Mbn20u::calc('50!%')", "304140932017133780436126081660647688443776415689605120000000000"],
        ["(new Mbn('2102.6'))->format()", "2 102.60"],
        ["(new Mbn('2102.6'))->format(true)", "2 102.60"],
        ["(new Mbn('2102.6'))->format(false)", "2102.60"],
        ["(new Mbn('2102.6'))->format({})", "2102.60"],
        ["(new Mbn('2102.6'))->format({MbnS:5})", "mbn.format.invalid_separator Mbn.format error*"],
        ["(new Mbn('2102.6'))->format({MbnS: \",\"})", "2102,60"],
        ["(new Mbn('2102.6'))->format({MbnT: \",\"})", "mbn.format.invalid_truncation Mbn.format error*"],
        ["(new Mbn('2102.6'))->format({MbnT: true})", "2102.6"],
        ["(new Mbn('2102.6'))->format({MbnF: true, MbnS: \",\", MbnT:true})","2 102,6"],
        ["(new Mbn('2102.6'))->format({MbnP: true})", "mbn.format.invalid_precision Mbn.format error*"],
        ["(new Mbn('2102.6'))->format({MbnP: 0})", "2103"],
        ["(new Mbn('2102.6'))->format({MbnP: 1})", "2102.6"],
        ["(new Mbn('2102.6'))->format({MbnP: 2})", "2102.60"],
        ["(new Mbn('2102.6'))->format({MbnP: 3})", "2102.600"],
        ["(new Mbn20u('2102.6'))->format({MbnP: 10, MbnT: false})", "2102,6000000000"],
        ["(new Mbn20u('2102.6'))->format({MbnP: 1, MbnT: false})", "2102,6"],
        ["(new Mbn20u('2102.12395'))->format({MbnP: 4, MbnT: false})", "2102,1240"],
        ["(new Mbn20u('2102.12395'))->format({MbnP: 4})", "2102,124"],
        ["(new Mbn0(100))->pow(501)", "mbn.limit_exceeded Mbn error*"],
        ["(new Mbn4yec('sgn(-18!)'))", "-1,0000"],
        ["(new Mbn4yec('sgn(-19!)'))", "mbn.limit_exceeded Mbn error*"],
        ["Mbn::prop()['MbnL']", "1000"],
        ["Mbn::check('= ceil(b + a - PI) ^ sqrt(c) / 0')", "b,a,PI,c"],
        ["Mbn::check('PI b E PI s s eps a')", "PI,b,E,s,eps,a"],
        ["Mbn::check('PI b E b PI s s eps a', true)", "b,s,a"],
        ["Mbn::check('PI E // PI s')", "false"],
        ["Mbn::check('PI E // PI s', true)", "false"],
        ["Mbn::check('1 + 2')", ""],
        ["Mbn::check('a + toString + valueOf + hasOwnProperty + b')", "a,toString,valueOf,hasOwnProperty,b"],
        ["new Mbn('a + toString + valueOf + hasOwnProperty + b', {a: 1, toString:2, valueOf: 3, hasOwnProperty: 4, b:5})", "15.00"],
        ["new Mbn('1  2.3')", "mbn.invalid_format Mbn error*"],
        ["new Mbn('1 2 .3')", "mbn.invalid_format Mbn error*"],
        ["Mbn::calc('1 {+ 2 +} 3')", "mbn.calc.unexpected Mbn.calc error*"],
        ["Mbn::calc('1 {+ 2 }+ 3')", "4.00"],
        ["Mbn::calc('2 {{ /3 {+ 2} 2* }} * 2 + 3')", "7.00"],
        ["Mbn::calc('2 + 3 + {{ /3 {+ 2} 2* ')", "mbn.calc.unexpected Mbn.calc error*"],
        ["Mbn::calc('2 + 3 {{ /3 {+ 2} 2* ')", "5.00"],
        ["Mbn::calc('2 \n+ 3 {{ /3\n {+ 2} 2* ')", "5.00"],
        ["Mbn::calc('PI\nE')", "8.54"],
        ["Mbn::calc('2 \n + 3 \r + 4 \t +5 {{ /3 {+ 2} 2* ')", "14.00"],
        ["new Mbn('={abc}5')", "5.00"],
        ["new Mbn('={{abc}}6+{def}5')", "11.00"],
        ["new Mbn(18292252932637972)", "18292252932637972.00"],
        ["new Mbn(182922529326379721234)", "182922529326379722806.00"],
        ["new Mbn('=7-5;9^r0;r0 r1')", "162.00"],
        ["new Mbn('=3;r1!r1')", "18.00"],
        ["new Mbn('3;r1!r1;r0/r2', {r2:2})", "9.00"],
        ["new Mbn(';r1+1;;', {r2:2})", "1.00"],
        ["Mbn::check('r0 E;r1;r3 r2')", "r0,E,r1,r3,r2"],
        ["Mbn::check('r0 E;r1;r3 r2', true)", "r3"],
        ["new Mbn('=0!')", "1.00"],
        ["Mbn::calc('2;4;6;8;1000r1+100r2+10r3+r4')", "2468.00"],
        ["Mbn::calc('2;4;6;8;1000r01+100r02+10r03+r04')", "8642.00"],
        ["new Mbn('1.1249999999999999')", "1.12"],
        ["Mbn::calc('n;10^(l-4);r1-r1#r2;0|1-(r3/r2+252100+(r1-r3)*10^6-1)#97',{n:\"49 1240 1747 1111 0010 7029 4036\",l:28})", "1.00"],
        ["Mbn::calc('n;10^(l-4);r1-r1#r2;0|1-(r3/r2+252100+(r1-r3)*10^6-1)#97',{n:\"49 1240 1747 1111 0100 7029 4036\",l:28})", "0.00"],
        ["0", "0"]
    ]
}
